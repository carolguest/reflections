What happens when you initialize a repository? Why do you need to do it?

You start tracking changes to any of the files that are tracked in the repository. You need to do it so you can use git commands on that repo.

How is the staging area different from the working directory and the repository? What value do you think it offers?

(A staging area is a place to bundle files before adding them to the repository. I think it is a safe place to organize files before putting them in a repo, kind of like the bag you use to take your lunch to work. (It is neither your home refrigerator nor your work refrigerator, just the subset of food you want to take to lunch.)

How can you use the staging area to make sure you have one commit per logical change?
Add the files to the staging area. Use a commit to move those into the repository.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are helpful when you want to maintain the original code for some reason, or to test a different experiment, or to collaborate when multiple people are working on branches at the same time.

How do the diagrams help you visualize the branch structure?
Easier to see commits that aren't reachable, because they aren't the tip of any branch. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A new commit is created that resolved any conflicts among the coins. The parents of the current commit are both of the merged branches

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
It makes assumptions about what code we wanted to keep or remove using some pretty smart stuff. It seems like there could be lost of conflicts that are lost.

